#!/bin/bash
# Smart aliases - only set if command exists

# Force rust-based tools over traditional ones - ONLY IF AVAILABLE
if command -v rg &>/dev/null; then
    alias grep='rg'
fi

if command -v fd &>/dev/null; then
    alias find='fd'
else
    # If fd installed via mise but not in PATH yet
    if [ -x "$HOME/.local/share/mise/installs/fd/10.2.0/fd-v10.2.0-x86_64-unknown-linux-musl/fd" ]; then
        alias find="$HOME/.local/share/mise/installs/fd/10.2.0/fd-v10.2.0-x86_64-unknown-linux-musl/fd"
        alias fd="$HOME/.local/share/mise/installs/fd/10.2.0/fd-v10.2.0-x86_64-unknown-linux-musl/fd"
    fi
fi

if command -v eza &>/dev/null; then
    alias ls='eza --icons --group-directories-first'
    alias ll='eza -la --icons --group-directories-first'
    alias lt='eza --tree --level=2 --icons'
    alias tree='eza --tree'
else
    # Fallback to standard ls
    alias ll='ls -alF'
    alias la='ls -A'
    alias l='ls -CF'
    alias lt='ls -la'
fi

if command -v bat &>/dev/null; then
    alias cat='bat --paging=never'
elif [ -x "$HOME/.local/share/mise/installs/bat/0.25.0/bat" ]; then
    alias cat="$HOME/.local/share/mise/installs/bat/0.25.0/bat --paging=never"
fi

if command -v procs &>/dev/null; then
    alias ps='procs'
fi

if command -v dust &>/dev/null; then
    alias du='dust'
else
    alias du='du -h'
fi

if command -v duf &>/dev/null; then
    alias df='duf'
else
    alias df='df -h'
fi

if command -v sd &>/dev/null; then
    alias sed='sd'
fi

if command -v btop &>/dev/null; then
    alias top='btop'
    alias htop='btop'
elif command -v htop &>/dev/null; then
    alias top='htop'
fi

if command -v delta &>/dev/null; then
    alias diff='delta'
fi

if command -v doggo &>/dev/null; then
    alias dig='doggo'
fi

if command -v hyperfine &>/dev/null; then
    alias time='hyperfine'
fi

# Only alias cd to z if zoxide is available AND properly initialized
if command -v zoxide &>/dev/null; then
    # Check if zoxide is initialized (has data dir)
    if [ -n "$(zoxide query -l 2>/dev/null | head -1)" ] || [ -d "$HOME/.local/share/zoxide" ]; then
        alias cd='z'
    fi
fi

# Use helix if available
if command -v hx &>/dev/null; then
    alias vi='hx'
    alias vim='hx'
elif [ -x "$HOME/.local/share/mise/installs/helix/25.01.1/hx" ]; then
    alias vi="$HOME/.local/share/mise/installs/helix/25.01.1/hx"
    alias vim="$HOME/.local/share/mise/installs/helix/25.01.1/hx"
    alias hx="$HOME/.local/share/mise/installs/helix/25.01.1/hx"
fi

if command -v tokei &>/dev/null; then
    alias wc='tokei'
fi

if command -v watchexec &>/dev/null; then
    alias watch='watchexec'
fi

if command -v jaq &>/dev/null; then
    alias jq='jaq'
fi

# Additional modern tools
if command -v gron &>/dev/null; then
    alias json='gron'
fi

if command -v gitui &>/dev/null; then
    alias gg='gitui'
fi

if command -v lazygit &>/dev/null; then
    alias lg='lazygit'
fi

if command -v yazi &>/dev/null; then
    alias fm='yazi'
fi

# Git shortcuts (always available if git is installed)
if command -v git &>/dev/null; then
    alias g='git'
    alias gs='git status'
    alias ga='git add'
    alias gc='git commit'
    alias gp='git push'
    alias gl='git pull'
    alias gd='git diff'
    alias gco='git checkout'
    alias gb='git branch'
    alias glog='git log --oneline --graph --decorate'
fi

# Directory navigation (always available)
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ~='cd ~'
alias c='cd ~/code'

# Safety nets
alias cp='cp -i'
alias mv='mv -i'
alias rm='rm -i'
alias mkdir='mkdir -p'

# Docker shortcuts (if docker is available)
if command -v docker &>/dev/null; then
    alias d='docker'
    alias dc='docker compose'
    alias dps='docker ps'
    alias di='docker images'
    alias drm='docker rm $(docker ps -aq)'
    alias drmi='docker rmi $(docker images -q)'
fi

# Kubernetes (if kubectl is available)
if command -v kubectl &>/dev/null; then
    alias k='kubectl'
    alias kgp='kubectl get pods'
    alias kgs='kubectl get services'
    alias kgd='kubectl get deployments'
fi

# Python shortcuts
if command -v python3 &>/dev/null; then
    alias py='python3'
    alias serve='python3 -m http.server'
    alias json='python3 -m json.tool'
fi

# Network (with fallbacks)
alias myip='curl -s https://checkip.amazonaws.com || curl -s https://httpbin.org/ip | jq -r .origin 2>/dev/null || echo "Unable to get IP"'
alias ports='netstat -tuln 2>/dev/null || ss -tuln'
alias ping='ping -c 5'

# System info
alias free='free -h'
alias diskspace='df -h | grep -E "^(/dev/|tmpfs)" | sort'
alias meminfo='free -h && echo "" && ps aux --sort=-%mem | head'

# Quick edits
alias bashrc='${EDITOR:-nano} ~/.bashrc && source ~/.bashrc'
alias aliases='${EDITOR:-nano} ~/.aliases && source ~/.aliases'
alias reload='source ~/.bashrc'

# Mise shortcuts (if available)
if command -v mise &>/dev/null; then
    alias mi='mise install'
    alias mu='mise use'
    alias ml='mise list'
    alias mr='mise run'
fi

# Claude CLI (if available)
if [ -f "$HOME/.claude/local/claude" ]; then
    alias claude="$HOME/.claude/local/claude"
fi

# Smart code navigation function (from original)
function c() {
    if [ $# -eq 0 ]; then
        cd ~/code
        return
    fi
    
    local pattern="$1"
    local matches=()
    
    # Try to use fd, with fallback to find
    if command -v fd &>/dev/null; then
        while IFS= read -r dir; do
            matches+=("$dir")
        done < <(fd -t d -d 1 "${pattern}" "$HOME/code" --base-directory "$HOME/code" 2>/dev/null)
    elif [ -x "$HOME/.local/share/mise/installs/fd/10.2.0/fd-v10.2.0-x86_64-unknown-linux-musl/fd" ]; then
        while IFS= read -r dir; do
            matches+=("$dir")
        done < <("$HOME/.local/share/mise/installs/fd/10.2.0/fd-v10.2.0-x86_64-unknown-linux-musl/fd" -t d -d 1 "${pattern}" "$HOME/code" --base-directory "$HOME/code" 2>/dev/null)
    else
        # Fallback to standard find
        while IFS= read -r dir; do
            matches+=("$(basename "$dir")")
        done < <(find "$HOME/code" -maxdepth 1 -type d -name "*${pattern}*" 2>/dev/null | grep -v "^$HOME/code$")
    fi
    
    if [ ${#matches[@]} -eq 0 ]; then
        echo "No repos matching '$pattern'"
        return 1
    elif [ ${#matches[@]} -eq 1 ]; then
        cd "$HOME/code/${matches[0]}"
    else
        # Multiple matches - use fzf if available, otherwise list them
        if command -v fzf &>/dev/null; then
            local selected=$(printf '%s\n' "${matches[@]}" | fzf --reverse --height=40% --prompt="Multiple matches for '$pattern': ")
            if [ -n "$selected" ]; then
                cd "$HOME/code/$selected"
            fi
        else
            echo "Multiple matches found:"
            printf '%s\n' "${matches[@]}"
            echo "Please be more specific."
        fi
    fi
}