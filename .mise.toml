# ==============================================================================
# Development Tools Configuration - mise
# ==============================================================================
#
# Copyright 2024 Mikki Hugo. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# FILE: .mise.toml
# DESCRIPTION: Comprehensive development tool version management configuration
#              for mise (formerly rtx). Defines tool versions, custom tasks,
#              and automation workflows for a complete development environment.
#              Emphasizes modern Rust-based CLI tools for enhanced performance.
#
# AUTHOR: Mikki Hugo <mikkihugo@gmail.com>
# VERSION: 5.2.0
# CREATED: 2024-01-18
# MODIFIED: 2024-12-06
#
# ENVIRONMENT: Professional Development Workstation
# TOOL MANAGER: mise 2024.12+
# LANGUAGE SUPPORT: Python, Node.js, Go, Rust, Kubernetes
#
# TOOL CATEGORIES:
#   - Programming Languages: Python, Node.js, Go, Rust
#   - Package Managers: pnpm, pipx
#   - Modern CLI Tools: bat, fd, ripgrep, eza (Rust-based replacements)
#   - Development Tools: GitHub CLI, starship, direnv
#   - Kubernetes Ecosystem: kubectl, k9s, helm, kustomize
#   - TUI Applications: gum, fzf, lazygit, lazydocker
#   - Code Quality: shellcheck, yamllint, actionlint
#   - Utilities: jq, yq, sqlite
#
# PERFORMANCE OPTIMIZATIONS:
#   - All tools pinned to "latest" for automatic updates
#   - Rust-based tools preferred for speed and reliability
#   - Parallel installation supported by mise
#   - Automatic tool installation on shell startup
#
# CUSTOM TASKS:
#   - setup: Complete environment setup
#   - update: Update all tools (mise + cargo)
#   - lint: Code quality checks
#   - guardian-*: Security system management
#   - gateway-*: Tabby gateway operations
#   - claude-*: AI assistant integration
#
# AUTOMATION FEATURES:
#   - Weekly tool updates via cron
#   - Guardian security system tasks
#   - Gateway deployment and monitoring
#   - Claude authentication management
#   - Backup and restoration workflows
#
# USAGE:
#   Install all tools: mise install
#   Run custom task: mise run <task-name>
#   Update tools: mise run update
#   Check status: mise doctor
#
# SECURITY CONSIDERATIONS:
#   - All tools installed to user directory
#   - Guardian protection system for critical binaries
#   - Encrypted backup storage for sensitive tools
#   - Regular integrity verification
#
# TROUBLESHOOTING:
#   - Check tool status: mise list
#   - Install missing: mise install
#   - Verify environment: mise doctor
#   - Update mise: mise self-update
#
# ==============================================================================

[tools]
# Languages
python = "latest"
node = "latest"
go = "latest"
rust = "latest"

# Package managers
pnpm = "latest"

# Modern rust-based CLI tools (better than originals)
bat = "latest"       # better cat
fd = "latest"        # better find
ripgrep = "latest"   # better grep (rg)
eza = "latest"       # better ls
delta = "latest"     # better diff
dust = "latest"      # better du
duf = "latest"       # better df
btop = "latest"      # better top/htop
sd = "latest"        # better sed
hyperfine = "latest" # better time
doggo = "latest"     # better dig
helix = "latest"     # modern editor
gitui = "latest"     # better git UI
bottom = "latest"    # another system monitor
tokei = "latest"     # code statistics
# tealdeer = "latest"  # not in mise, use: cargo install tealdeer
# broot = "latest"     # not in mise, use: cargo install broot
# xh = "latest"        # not in mise, use: cargo install xh
zoxide = "latest"    # better cd

# Development tools
lazygit = "latest"
github-cli = "latest"
starship = "latest"
direnv = "latest"
just = "latest"
watchexec = "latest"

# Kubernetes tools
k9s = "latest"         # Kubernetes TUI
kubectl = "latest"     # Kubernetes CLI
kind = "latest"        # Kubernetes in Docker
helm = "latest"        # Package manager for Kubernetes
kubectx = "latest"     # Switch between clusters/namespaces
kustomize = "latest"   # Kubernetes config management
dive = "latest"        # Docker image explorer
stern = "latest"       # Multi-pod log tailing
# flux = "latest"        # not in mise, install manually

# TUI tools
gum = "latest"
fzf = "latest"
yazi = "latest"
lazydocker = "latest"

# Linters & formatters
shellcheck = "latest"
shfmt = "latest"
yamllint = "latest"
golangci-lint = "latest"
actionlint = "latest"

# Utils
jq = "latest"
yq = "latest"
gron = "latest"      # make JSON greppable
sqlite = "latest"    # SQLite database
pipx = "latest"
# jaq = "latest"       # not in mise, use: cargo install jaq
# tmux = "latest"    # needs system libs

[tasks.test]
run = "echo 'Running tests...'"
description = "Run project tests"

[tasks.lint]
run = ["shellcheck scripts/*.sh", "yamllint ."]
description = "Lint all files"

[tasks.setup]
run = ["./.scripts/auto-install.sh", "./.scripts/install-system-deps.sh"]
description = "Complete setup - auto-install everything possible"

[tasks.auto-install]
run = "./.scripts/auto-install.sh"
description = "Install everything possible without sudo"

[tasks.system-deps]
run = "./.scripts/install-system-deps.sh"
description = "Install system dependencies (tmux, build tools, etc.)"

[tasks.failsafe-check]
run = "./.mise/tasks/failsafe-check.sh"
description = "Verify and repair shell failsafe systems"

[tasks.failsafe-schedule]
run = "./.scripts/guardian/schedule-failsafe-checks.sh"
description = "Schedule periodic failsafe integrity checks"

[tasks.guardian-protect]
run = "./.scripts/guardian/guardian-protect.sh protect"
description = "Apply filesystem-level protection to guardian files"

[tasks.guardian-unprotect]
run = "./.scripts/guardian/guardian-protect.sh unprotect"
description = "Remove filesystem-level protection (for updates)"

[tasks.guardian-status]
run = "./.scripts/guardian/guardian-protect.sh status"
description = "Check current protection status of guardian files"

[tasks.guardian-recovery]
run = "./.scripts/guardian/guardian-protect.sh recovery"
description = "Create emergency recovery script"

[tasks.guardian-compile]
run = "./.scripts/guardian/compile-guardian.sh"
description = "Compile hardened shell guardian with integrity verification"

[tasks.guardian-verify]
run = "verify-guardian"
description = "Verify shell guardian binary integrity"

[tasks.guardian-emergency]
run = "bash ./.guardian-shell/emergency-recovery.sh"
description = "Enter emergency recovery mode"

[tasks.guardian-service]
run = "./.scripts/guardian/setup-guardian-service.sh"
description = "Setup systemd service for regular integrity verification"

[tasks.guardian-prompt]
run = "source ./.scripts/guardian/guardian-status.sh prompt"
description = "Add guardian status indicator to prompt"

[tasks.guardian-backup-init]
run = "./.scripts/guardian/guardian-remote-backup.sh init"
description = "Initialize remote backup of guardian binary"

[tasks.guardian-backup-update]
run = "./.scripts/guardian/guardian-remote-backup.sh update"
description = "Update remote backup of guardian binary"

[tasks.guardian-backup-restore]
run = "./.scripts/guardian/guardian-remote-backup.sh restore"
description = "Restore guardian binary from remote backup"

[tasks.guardian-backup-status]
run = "./.scripts/guardian/guardian-remote-backup.sh status"
description = "Show remote backup status"

[tasks.guardian-hardlink-create]
run = "./.scripts/guardian/guardian-hardlink.sh create"
description = "Create hardlinks to guardian binary across filesystem"

[tasks.guardian-hardlink-verify] 
run = "./.scripts/guardian/guardian-hardlink.sh verify"
description = "Verify guardian hardlink integrity"

[tasks.guardian-hardlink-find]
run = "./.scripts/guardian/guardian-hardlink.sh find"
description = "Find and restore guardian binary from hardlinks"

[tasks.guardian-secure-init]
run = "./.scripts/guardian/secure-storage.sh init"
description = "Initialize encrypted secure storage for guardian"

[tasks.guardian-secure-open]
run = "./.scripts/guardian/secure-storage.sh open"
description = "Open encrypted guardian secure storage"

[tasks.guardian-secure-backup]
run = "./.scripts/guardian/secure-storage.sh backup"
description = "Backup guardian binary to encrypted storage"

[tasks.guardian-secure-restore]
run = "./.scripts/guardian/secure-storage.sh restore"
description = "Restore guardian binary from encrypted storage"

[tasks.guardian-secure-close]
run = "./.scripts/guardian/secure-storage.sh close"
description = "Close encrypted guardian secure storage"

[tasks.guardian-security-verify]
run = "./.scripts/guardian/guardian-security.sh verify"
description = "Verify all guardian security systems"

[tasks.guardian-security-restore] 
run = "./.scripts/guardian/guardian-security.sh restore"
description = "Restore guardian from any available source"

[tasks.guardian-security-protect]
run = "./.scripts/guardian/guardian-security.sh protect"
description = "Apply all guardian protection mechanisms"

[tasks.guardian-security-status]
run = "./.scripts/guardian/guardian-security.sh status"
description = "Show comprehensive guardian security status"

[tasks.guardian-security-all]
run = "./.scripts/guardian/guardian-security.sh all"
description = "Complete guardian security maintenance (verify, restore, protect, status)"

[tasks.guardian-keeper-compile]
run = "./.scripts/guardian/compile-keeper.sh"
description = "Compile and install the Guardian Keeper parasite system"

[tasks.guardian-keeper-run]
run = "guardian-keeper"
description = "Run the Guardian Keeper once to check and repair survival copies"

[tasks.guardian-minimal]
run = "./.scripts/guardian/minimal-compile.sh"
description = "Compile minimal self-repairing guardian"

[tasks.guardian-emergency]
run = "bash ./.guardian-shell/emergency.sh"
description = "Emergency guardian restoration script"

[tasks.sync]
run = "./.scripts/auto-sync.sh"
description = "Auto-sync dotfiles, tokens, and SSH hosts"

[tasks.update]
run = """
  echo "📦 Updating mise tools..."
  mise upgrade
  mise install
  
  echo ""
  echo "🦀 Updating cargo-installed tools..."
  if command -v cargo-update >/dev/null 2>&1; then
    cargo install-update -a
  else
    echo "⚠️  cargo-update not installed. Installing..."
    cargo install cargo-update
    cargo install-update -a
  fi
  
  echo ""
  echo "🚀 Installing missing rust tools..."
  # Install tools not available in mise
  for tool in procs gping tealdeer broot xh jaq nu; do
    if ! command -v $tool >/dev/null 2>&1; then
      echo "Installing $tool..."
      cargo install $tool
    fi
  done
  
  echo ""
  echo "✅ All tools updated!"
"""
description = "Update all tools (mise + cargo) to latest versions"

[tasks.update-mise]
run = "mise upgrade && mise install"
description = "Update only mise-managed tools"

[tasks.update-cargo]
run = """
  if command -v cargo-update >/dev/null 2>&1; then
    cargo install-update -a
  else
    cargo install cargo-update
    cargo install-update -a
  fi
"""
description = "Update only cargo-installed tools"

[tasks.gateway-backup]
run = "./.scripts/backup-tabby-gateway.sh"
description = "Backup Tabby gateway data to GitHub gist"

[tasks.gateway-sync]
run = "./.scripts/tabby-gateway-config.sh sync"
description = "Sync Tabby gateway config from gist"

[tasks.gateway-deploy]
run = "./.scripts/deploy-tabby-gateway.sh"
description = "Deploy Tabby gateway container"

[tasks.gateway-status]
run = "./.scripts/gateway-status.sh status"
description = "Check Tabby gateway status on this server"

[tasks.gateway-ensure]
run = "./.scripts/gateway-status.sh ensure"
description = "Ensure gateway is running on this server"

[tasks.gateway-update]
run = "./.scripts/gateway-status.sh update"
description = "Update gateway status and sync to gist"

[tasks.gateway-schedule]
run = """
  echo "🕐 Setting up scheduled gateway tasks..."
  
  # Check if this is the gateway server
  if ~/.dotfiles/.scripts/gateway-status.sh status | grep -q "Gateway is running"; then
    echo "✅ This is the gateway server ($(hostname))"
    
    # Setup cron job for regular status checks and backups
    (crontab -l 2>/dev/null | grep -v "gateway-status\\|backup-tabby-gateway" ; cat << EOF
# Tabby Gateway Status Check (every 5 minutes)
*/5 * * * * /home/mhugo/.dotfiles/.scripts/gateway-status.sh ensure >> /home/mhugo/.dotfiles/logs/gateway-status.log 2>&1

# Tabby Gateway Daily Backup (3 AM)
0 3 * * * /home/mhugo/.dotfiles/.scripts/backup-tabby-gateway.sh >> /home/mhugo/.dotfiles/logs/gateway-backup.log 2>&1
EOF
    ) | crontab -
    
    echo "✅ Cron jobs installed"
    crontab -l | grep gateway
  else
    echo "⚠️  Gateway not running on this server"
    echo "Run 'mise run gateway-deploy' to deploy here"
  fi
"""
description = "Setup scheduled tasks for gateway (status checks + backups)"

[tasks.schedule-updates]
run = """
  echo "🕐 Setting up weekly tool updates..."
  
  # Setup cron job for weekly updates
  (crontab -l 2>/dev/null | grep -v "mise run update" ; cat << EOF
# Weekly tool updates (Sundays at 2 AM)
0 2 * * 0 cd /home/mhugo/.dotfiles && /home/mhugo/.local/bin/mise run update >> /home/mhugo/.dotfiles/logs/tool-updates.log 2>&1
EOF
  ) | crontab -
  
  echo "✅ Weekly updates scheduled"
  echo "📋 Current cron jobs:"
  crontab -l | grep -E "(mise|tool)"
"""
description = "Schedule weekly automatic tool updates"

[tasks.claude-auth-init]
run = "~/.dotfiles/.scripts/claude-auth-gist.sh init"
description = "Initialize Claude auth gist sync"

[tasks.claude-auth-push]
run = "~/.dotfiles/.scripts/claude-auth-gist.sh push"
description = "Push Claude auth to private gist"

[tasks.claude-auth-pull]
run = "~/.dotfiles/.scripts/claude-auth-gist.sh pull"
description = "Pull Claude auth from private gist"

[tasks.claude-auth-sync]
run = "~/.dotfiles/.scripts/claude-auth-gist.sh auto"
description = "Auto-sync Claude auth (pull if newer, push if local)"

[tasks.claude-auth-check]
run = """
  echo "🔐 Claude Auth Status"
  echo "━━━━━━━━━━━━━━━━━━━"
  
  # Check gist sync
  ~/.dotfiles/.scripts/claude-auth-gist.sh status
  
  echo ""
  
  # Check local auth
  if [ -f ~/.claude/.credentials.json ]; then
    age_days=$(( ($(date +%s) - $(stat -c %Y ~/.claude/.credentials.json 2>/dev/null || stat -f %m ~/.claude/.credentials.json)) / 86400 ))
    echo "📅 Credential age: $age_days days"
  fi
  
  # Check if we need to refresh
  if [ ! -f ~/.claude/.credentials.json ] || [ "$age_days" -gt 40 ]; then
    echo ""
    echo "⚠️  Auth needs refresh. Run:"
    echo "   mise run claude-auth-refresh"
  fi
"""
description = "Check Claude auth status and age"

[tasks.claude-auth-refresh]
run = """
  echo "🔄 Refreshing Claude auth..."
  
  # First try to pull from gist
  if ~/.dotfiles/.scripts/claude-auth-gist.sh pull; then
    echo "✅ Auth refreshed from gist"
  else
    echo "❌ Gist pull failed"
    echo ""
    echo "📝 Please authenticate manually:"
    echo "   1. Run: claude"
    echo "   2. Complete login"
    echo "   3. Run: mise run claude-auth-push"
  fi
"""
description = "Refresh Claude auth (pull from gist or prompt for login)"

[tasks.claude-setup]
run = """
  echo "🚀 Setting up Claude with auth sync..."
  
  # Check GitHub auth
  if ! gh auth status &>/dev/null; then
    echo "📝 Please login to GitHub first:"
    gh auth login
  fi
  
  # Initialize gist if needed
  if [ -z "$CLAUDE_AUTH_GIST_ID" ] && [ ! -f ~/.claude/.gist-sync ]; then
    mise run claude-auth-init
  fi
  
  # Try to pull existing auth
  if ! mise run claude-auth-pull; then
    echo ""
    echo "📝 No existing auth found. Please login:"
    claude
    echo ""
    echo "✅ Now push to gist:"
    mise run claude-auth-push
  fi
  
  echo ""
  echo "✅ Claude setup complete!"
  echo "   Auth will sync across all your machines"
"""
description = "Complete Claude setup with GitHub gist sync"

[tasks.claude-schedule]
run = """
  echo "🕐 Setting up Claude auth auto-sync..."
  
  # Add to crontab - sync every 6 hours
  (crontab -l 2>/dev/null | grep -v "claude-auth-sync" ; cat << EOF
# Claude auth sync (every 6 hours)
0 */6 * * * cd /home/mhugo/.dotfiles && /home/mhugo/.local/bin/mise run claude-auth-sync >> /home/mhugo/.dotfiles/logs/claude-auth.log 2>&1
EOF
  ) | crontab -
  
  echo "✅ Auto-sync scheduled (every 6 hours)"
  crontab -l | grep claude
"""
description = "Schedule automatic Claude auth sync"
