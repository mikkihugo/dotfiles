FROM ubuntu:22.04

# Prevent interactive prompts
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC

# Install base dependencies
RUN apt-get update && apt-get install -y \
    # Basic tools
    curl wget git vim nano \
    # Build tools
    build-essential cmake \
    # Python
    python3 python3-pip python3-venv \
    # Node.js
    nodejs npm \
    # Docker CLI
    docker.io \
    # Go (for some tools)
    golang-go \
    # SSH and Git
    openssh-client \
    # System tools
    htop tmux screen \
    # Terminal tools
    zsh fish \
    # Dependencies for mise
    direnv fzf \
    && rm -rf /var/lib/apt/lists/*

# Install mise (tool version manager)
RUN curl https://mise.run | sh && \
    echo 'eval "$(~/.local/bin/mise activate bash)"' >> ~/.bashrc && \
    echo 'eval "$(~/.local/bin/mise activate zsh)"' >> ~/.zshrc

# Configure mise with common tools
RUN ~/.local/bin/mise use --global python@3.11 && \
    ~/.local/bin/mise use --global node@20 && \
    ~/.local/bin/mise use --global rust@latest && \
    ~/.local/bin/mise use --global go@latest && \
    ~/.local/bin/mise use --global github-cli@latest && \
    ~/.local/bin/mise use --global ripgrep@latest && \
    ~/.local/bin/mise use --global bat@latest && \
    ~/.local/bin/mise use --global eza@latest && \
    ~/.local/bin/mise use --global fd@latest && \
    ~/.local/bin/mise use --global delta@latest

# Install AI development tools
RUN pip3 install --no-cache-dir \
    # Aider - AI pair programming
    aider-chat \
    # OpenAI & Anthropic
    openai anthropic \
    # LiteLLM - use any LLM API
    litellm \
    # Langchain
    langchain langchain-community \
    # Code analysis
    tree-sitter \
    # Jupyter for notebooks
    jupyter notebook \
    # Streamlit for quick UIs
    streamlit \
    # Vector stores for RAG
    chromadb qdrant-client \
    # Embeddings
    sentence-transformers \
    # Document loaders
    pypdf tiktoken

# Install Node.js AI tools
RUN npm install -g \
    # AI commit messages
    aicommits \
    # Code generation
    @builder.io/ai-shell \
    # Continue.dev CLI
    @continuedev/continue

# Install Go-based tools
RUN go install github.com/charmbracelet/mods@latest && \
    go install github.com/jmorganca/ollama@latest

# Install aichat (Rust-based with RAG support)
RUN curl -sSL https://github.com/sigoden/aichat/releases/latest/download/aichat-$(uname -m)-unknown-linux-musl.tar.gz | tar -xz -C /usr/local/bin/

# Install GitHub CLI with Copilot
RUN curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | tee /usr/share/keyrings/githubcli-archive-keyring.gpg > /dev/null && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null && \
    apt-get update && \
    apt-get install -y gh && \
    rm -rf /var/lib/apt/lists/*

# Install code-server (VS Code in browser)
RUN curl -fsSL https://code-server.dev/install.sh | sh

# Create directories
RUN mkdir -p /workspace /root/.config /root/.cache

# Setup shell with mise integration
RUN chsh -s /bin/zsh && \
    sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended && \
    echo 'eval "$(mise activate zsh)"' >> ~/.zshrc && \
    echo 'eval "$(mise activate bash)"' >> ~/.bashrc

# Create mise config for the workspace
RUN mkdir -p ~/.config/mise && \
    cat > ~/.config/mise/config.toml << 'EOF'
[settings]
experimental = true
legacy_version_file = true
always_keep_download = false
plugin_autoupdate_last_check_duration = "7d"

[tools]
python = "3.11"
node = "20"
rust = "latest"
go = "latest"
"github-cli" = "latest"
ripgrep = "latest"
bat = "latest"
eza = "latest"
fd = "latest"
delta = "latest"
jq = "latest"
yq = "latest"
glow = "latest"
lazygit = "latest"
lazydocker = "latest"

[env]
MISE_PYTHON_DEFAULT_PACKAGES_FILE = "~/.config/mise/python-packages.txt"
MISE_NODE_DEFAULT_PACKAGES_FILE = "~/.config/mise/node-packages.txt"
EOF

# Create default packages files
RUN mkdir -p ~/.config/mise && \
    cat > ~/.config/mise/python-packages.txt << 'EOF'
ipython
black
ruff
mypy
pytest
httpx
rich
EOF && \
    cat > ~/.config/mise/node-packages.txt << 'EOF'
pnpm
yarn
typescript
tsx
prettier
eslint
EOF

# Add setup scripts
COPY aider-rag-setup.sh /tmp/aider-rag-setup.sh
COPY model-config.sh /tmp/model-config.sh
RUN chmod +x /tmp/*.sh && \
    /tmp/aider-rag-setup.sh setup && \
    /tmp/model-config.sh && \
    rm /tmp/*.sh

# Add convenience script
COPY <<'EOF' /usr/local/bin/ai
#!/bin/bash
# AI Development Assistant Launcher

case "${1:-help}" in
    aider)
        shift
        # Setup aichat for RAG if workspace has files
        if [ -n "$(ls -A /workspace 2>/dev/null)" ]; then
            echo "Setting up RAG for workspace..."
            export AICHAT_ENABLE_RAG=true
            export AICHAT_RAG_EMBEDDING_MODEL="text-embedding-3-small"
            export AICHAT_RAG_VECTOR_STORE="/workspace/.aichat/vectors"
            
            # Index workspace if not already done
            if [ ! -d "/workspace/.aichat/vectors" ]; then
                echo "Indexing codebase for RAG..."
                aichat --role coder --rag-index /workspace
            fi
        fi
        
        # Start aider with GitHub models (free)
        exec aider-free "$@"
        ;;
    chat)
        shift
        litellm "$@"
        ;;
    commit)
        aicommits
        ;;
    code)
        code-server --bind-addr 0.0.0.0:8080 --auth none /workspace
        ;;
    jupyter)
        jupyter notebook --ip=0.0.0.0 --port=8888 --no-browser --allow-root
        ;;
    shell)
        bash
        ;;
    *)
        echo "AI Development Environment"
        echo ""
        echo "Usage: ai {command}"
        echo ""
        echo "Commands:"
        echo "  aider   - Start Aider AI pair programmer"
        echo "  chat    - Start AI chat interface"
        echo "  commit  - Generate AI commit message"
        echo "  code    - Start VS Code server"
        echo "  jupyter - Start Jupyter notebook"
        echo "  shell   - Start interactive shell"
        echo ""
        echo "Environment variables:"
        echo "  OPENAI_API_KEY     - OpenAI API key"
        echo "  ANTHROPIC_API_KEY  - Anthropic Claude API key"
        echo "  GITHUB_TOKEN       - GitHub token"
        ;;
esac
EOF
RUN chmod +x /usr/local/bin/ai

# Default working directory
WORKDIR /workspace

# Expose common ports
EXPOSE 8080 8888 3000

# Start with menu
CMD ["/usr/local/bin/ai"]