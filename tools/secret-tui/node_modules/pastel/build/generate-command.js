import process from 'node:process';
import { render } from 'ink';
import React from 'react';
import { StatusMessage } from '@inkjs/ui';
import { fromZodError } from 'zod-validation-error';
import generateOptions from './generate-options.js';
import generateArguments from './generate-arguments.js';
const generateCommand = (commanderCommand, pastelCommand, { appComponent }) => {
    commanderCommand.helpOption('-h, --help', 'Show help');
    if (pastelCommand.description) {
        commanderCommand.description(pastelCommand.description);
    }
    if (pastelCommand.alias) {
        commanderCommand.alias(pastelCommand.alias);
    }
    const optionsSchema = pastelCommand.options;
    if (optionsSchema) {
        const options = generateOptions(optionsSchema);
        for (const option of options) {
            commanderCommand.addOption(option);
        }
    }
    let hasVariadicArgument = false;
    const argumentsSchema = pastelCommand.args;
    if (argumentsSchema) {
        const arguments_ = generateArguments(argumentsSchema);
        for (const argument of arguments_) {
            if (argument.variadic) {
                hasVariadicArgument = true;
            }
            commanderCommand.addArgument(argument);
        }
    }
    const { component } = pastelCommand;
    if (component) {
        commanderCommand.action((...input) => {
            // Remove the last argument, which is an instance of Commander command
            input.pop();
            const options = input.pop();
            let parsedOptions = {};
            if (pastelCommand.options) {
                const result = pastelCommand.options.safeParse(options);
                if (result.success) {
                    parsedOptions = result.data ?? {};
                }
                else {
                    render(React.createElement(StatusMessage, { variant: "error" }, fromZodError(result.error, {
                        maxIssuesInMessage: 1,
                        prefix: '',
                        prefixSeparator: '',
                    }).message));
                    // eslint-disable-next-line unicorn/no-process-exit
                    process.exit(1);
                }
            }
            let arguments_ = [];
            if (pastelCommand.args) {
                const result = pastelCommand.args.safeParse(hasVariadicArgument ? input.flat() : input);
                if (result.success) {
                    arguments_ = result.data ?? [];
                }
                else {
                    render(React.createElement(StatusMessage, { variant: "error" }, fromZodError(result.error, {
                        maxIssuesInMessage: 1,
                        prefix: '',
                        prefixSeparator: '',
                    }).message));
                    // eslint-disable-next-line unicorn/no-process-exit
                    process.exit(1);
                }
            }
            render(React.createElement(appComponent, {
                Component: component,
                commandProps: {
                    options: parsedOptions,
                    args: arguments_,
                },
            }));
        });
    }
};
export default generateCommand;
//# sourceMappingURL=generate-command.js.map