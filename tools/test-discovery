#!/usr/bin/env bash

# Quick discovery test for secret sync
# Shows how machines find each other on local network

set -euo pipefail

echo "üîç Testing Secret Sync Discovery..."
echo ""

# Check if we're in the right environment
if ! command -v ncat >/dev/null 2>&1 && ! command -v nc >/dev/null 2>&1; then
    echo "‚ùå netcat/ncat not available for testing"
    echo "   Install with: sudo apt install ncat"
    exit 1
fi

DISCOVERY_PORT=8766
SYNC_PORT=8765

# Function to send discovery broadcast
send_discovery() {
    local device_name="$1"
    local message=$(cat <<EOF
{
  "type": "secret_sync_discovery",
  "device_name": "$device_name",
  "device_id": "test-$(date +%s)",
  "sync_key_hash": "test123456789abc",
  "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
  "response_port": $SYNC_PORT
}
EOF
)

    echo "üì° Broadcasting discovery from $device_name..."

    # Broadcast to multiple network ranges
    for network in "192.168.1.255" "192.168.0.255" "10.0.0.255"; do
        echo "   ‚Üí $network:$DISCOVERY_PORT"
        echo "$message" | nc -u -w1 "$network" "$DISCOVERY_PORT" 2>/dev/null || true
    done
}

# Function to listen for discovery
listen_discovery() {
    local device_name="$1"

    echo "üëÇ Listening for discovery on port $DISCOVERY_PORT..."
    echo "   Press Ctrl+C to stop"
    echo ""

    # Listen for UDP broadcasts
    nc -u -l "$DISCOVERY_PORT" | while read -r line; do
        echo "üì• Received: $line"

        # Parse JSON and respond if it's a discovery message
        if echo "$line" | grep -q "secret_sync_discovery"; then
            echo "ü§ù Sending response..."

            response=$(cat <<EOF
{
  "type": "secret_sync_response",
  "device_name": "$device_name",
  "device_id": "test-responder-$(date +%s)",
  "sync_key_hash": "test123456789abc",
  "sync_port": $SYNC_PORT,
  "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
}
EOF
)
            # Would send response to the requesting machine
            echo "   Response: $response"
        fi
        echo ""
    done
}

# Show network interfaces
echo "üåê Network interfaces:"
ip addr show | grep -E "inet.*brd" | sed 's/^/   /'
echo ""

# Parse command
case "${1:-help}" in
    "send")
        device_name="${2:-test-sender}"
        send_discovery "$device_name"
        echo "‚úÖ Discovery broadcast sent"
        ;;

    "listen")
        device_name="${2:-test-listener}"
        listen_discovery "$device_name"
        ;;

    "both")
        device_name="${2:-test-both}"
        echo "üîÑ Starting discovery test..."
        echo "   This will broadcast and listen simultaneously"
        echo ""

        # Start listener in background
        listen_discovery "$device_name" &
        LISTENER_PID=$!

        sleep 2

        # Send discovery
        send_discovery "$device_name"

        echo ""
        echo "üëÇ Listener running in background (PID: $LISTENER_PID)"
        echo "   Kill with: kill $LISTENER_PID"
        ;;

    *)
        echo "Usage: $0 {send|listen|both} [device_name]"
        echo ""
        echo "Commands:"
        echo "  send    - Send discovery broadcast"
        echo "  listen  - Listen for discovery broadcasts"
        echo "  both    - Send broadcast and listen for responses"
        echo ""
        echo "Examples:"
        echo "  # On machine 1:"
        echo "  $0 listen laptop"
        echo ""
        echo "  # On machine 2:"
        echo "  $0 send desktop"
        echo ""
        echo "This demonstrates how secret-sync machines find each other!"
        ;;
esac